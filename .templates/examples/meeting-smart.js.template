/**
 * Template: Smart Meeting Notes
 * Description: Intelligent meeting template with recurring meeting detection
 * Features: File searching, pattern matching, meeting history, attendance tracking
 */

module.exports = (note) => {
  const { filename, dateString, timeString, user, workspace } = note;

  let content = '';

  // Extract meeting name from filename
  const meetingName = filename.replace(/\.(txt|md)$/i, '').replace(/-/g, ' ');

  // Note: Recurring meeting detection would require async API access
  // which is not supported in the current executor. This can be added
  // when async support is implemented.
  let isRecurring = false;
  let previousMeetings = [];

  // Determine meeting type from filename
  const isStandup = /standup|daily|scrum/i.test(filename);
  const isRetrospective = /retro|retrospective/i.test(filename);
  const isPlanning = /planning|sprint-planning/i.test(filename);
  const isOneOnOne = /1-1|one-on-one|1:1/i.test(filename);

  // Add frontmatter
  content += '---\n';
  content += 'tags: [meeting';
  if (isStandup) content += ', standup, daily';
  if (isRetrospective) content += ', retrospective, review';
  if (isPlanning) content += ', planning, sprint';
  if (isOneOnOne) content += ', 1-1, one-on-one';
  if (isRecurring) content += ', recurring';
  content += ']\n';
  content += `created: ${dateString} at ${timeString}\n`;
  content += `meeting: ${meetingName}\n`;
  if (isRecurring) content += 'recurring: true\n';
  content += '---\n\n';

  // Header
  content += `# ${capitalize(meetingName)}\n\n`;
  content += `**Date:** ${dateString}\n`;
  content += `**Time:** ${timeString}\n`;
  content += `**Location/Link:** \n\n`;

  // Recurring meeting context
  if (isRecurring && previousMeetings.length > 0) {
    content += '## Previous Meetings\n\n';
    content += '*This is a recurring meeting. See previous notes:*\n\n';
    for (const prev of previousMeetings) {
      content += `- [[${prev.name}]] - ${prev.date || 'date unknown'}\n`;
    }
    content += '\n';
  }

  // Attendees
  content += '## Attendees\n\n';
  content += `- ${user} (facilitator)\n`;
  content += '- \n';
  content += '- \n\n';

  // Meeting-type-specific sections
  if (isStandup) {
    // Standup format
    content += '## Updates\n\n';
    content += '### [Team Member 1]\n';
    content += '**Yesterday:**\n- \n\n';
    content += '**Today:**\n- \n\n';
    content += '**Blockers:**\n- \n\n';

    content += '### [Team Member 2]\n';
    content += '**Yesterday:**\n- \n\n';
    content += '**Today:**\n- \n\n';
    content += '**Blockers:**\n- \n\n';

    content += '## Blockers Summary\n\n';
    content += '- \n\n';

  } else if (isRetrospective) {
    // Retrospective format
    content += '## Sprint Summary\n\n';
    content += '**Sprint:** \n';
    content += '**Goals Completed:** ___ / ___\n';
    content += '**Velocity:** \n\n';

    content += '## What Went Well âœ…\n\n';
    content += '- \n';
    content += '- \n';
    content += '- \n\n';

    content += '## What Could Be Improved ðŸ”„\n\n';
    content += '- \n';
    content += '- \n';
    content += '- \n\n';

    content += '## Action Items ðŸŽ¯\n\n';
    content += '- [ ] \n';
    content += '- [ ] \n';
    content += '- [ ] \n\n';

    content += '## Kudos & Shoutouts ðŸŽ‰\n\n';
    content += '- \n';
    content += '- \n\n';

  } else if (isPlanning) {
    // Planning format
    content += '## Sprint Goals\n\n';
    content += '**Sprint:** \n';
    content += '**Duration:** \n';
    content += '**Capacity:** \n\n';

    content += '**Primary Objectives:**\n';
    content += '1. \n';
    content += '2. \n';
    content += '3. \n\n';

    content += '## Stories/Tasks\n\n';
    content += '| Story | Points | Assignee | Priority |\n';
    content += '|-------|--------|----------|----------|\n';
    content += '|       |        |          | High/Med/Low |\n';
    content += '|       |        |          |          |\n\n';

    content += '## Risks & Dependencies\n\n';
    content += '- \n\n';

  } else if (isOneOnOne) {
    // One-on-one format
    content += '## Agenda\n\n';
    content += '**Topics to discuss:**\n';
    content += '1. \n';
    content += '2. \n';
    content += '3. \n\n';

    content += '## Check-in\n\n';
    content += '**How are things going?**\n\n';
    content += '\n\n';
    content += '**Any concerns or questions?**\n\n';
    content += '\n\n';

    content += '## Progress & Goals\n\n';
    content += '**Recent accomplishments:**\n';
    content += '- \n\n';
    content += '**Current focus:**\n';
    content += '- \n\n';
    content += '**Goals for next period:**\n';
    content += '- \n\n';

    content += '## Development\n\n';
    content += '**Growth areas:**\n';
    content += '- \n\n';
    content += '**Support needed:**\n';
    content += '- \n\n';

  } else {
    // Standard meeting format
    content += '## Agenda\n\n';
    content += '1. \n';
    content += '2. \n';
    content += '3. \n';
    content += '4. Any other business\n\n';

    content += '## Discussion Notes\n\n';
    content += `[${timeString}] Meeting started\n\n`;
    content += '### Topic 1:\n\n';
    content += '\n\n';
    content += '### Topic 2:\n\n';
    content += '\n\n';
    content += '### Topic 3:\n\n';
    content += '\n\n';
  }

  // Common sections for all meeting types
  content += '## Decisions Made\n\n';
  content += '1. \n';
  content += '2. \n\n';

  content += '## Action Items\n\n';
  content += '| Action | Owner | Due Date | Status |\n';
  content += '|--------|-------|----------|--------|\n';
  content += '|        |       |          | ðŸ”² Not Started |\n';
  content += '|        |       |          | ðŸ”„ In Progress |\n';
  content += '|        |       |          | âœ… Complete |\n\n';

  content += '## Follow-up\n\n';
  content += '**Next meeting:** \n';
  content += '**Items to carry forward:**\n';
  content += '- \n\n';

  // Reference section
  content += '## References\n\n';
  content += '**Related notes:**\n';
  content += '- \n\n';

  content += '**Links & resources:**\n';
  content += '- \n\n';

  // Closing
  content += '---\n\n';
  content += `**Meeting notes by ${user}** | Project: ${workspace}\n`;

  return content;
};

// Helper to capitalize words
function capitalize(str) {
  return str.split(' ').map(word =>
    word.charAt(0).toUpperCase() + word.slice(1)
  ).join(' ');
}
