/**
 * Template: Daily Standup
 * Description: Smart daily standup with task formatting helpers
 * Features: Helper functions, string formatting, task management, smart defaults
 */

module.exports = (note) => {
  const { dateString, timeString, weekday, user, workspace, date } = note;

  let content = '';

  // Use the provided Date object directly
  const dateObj = date;
  const yesterday = note.dateHelper.toDate();
  yesterday.setDate(yesterday.getDate() - 1);
  const tomorrow = note.dateHelper.toDate();
  tomorrow.setDate(tomorrow.getDate() + 1);

  // Determine if it's Monday (look back to Friday)
  const isMonday = weekday === 'Mon';
  const lookbackDay = isMonday ? 'Friday' : 'Yesterday';
  const lookforwardDay = 'Tomorrow';

  // Add frontmatter
  content += '---\n';
  content += 'tags: [standup, daily, team]\n';
  content += `created: ${dateString} at ${timeString}\n`;
  content += `standup-date: ${note.dateHelper.format('YYYY-MM-DD')}\n`;
  content += `day-of-week: ${weekday}\n`;
  content += '---\n\n';

  // Header
  content += `# Daily Standup - ${weekday}, ${dateString}\n\n`;
  content += `**Team Member:** ${user}\n`;
  content += `**Project:** ${workspace}\n`;
  content += `**Time:** ${timeString}\n\n`;

  content += '---\n\n';

  // Yesterday section
  if (isMonday) {
    content += '## Friday (Last Working Day)\n\n';
    const friday = note.dateHelper.toDate();
    friday.setDate(friday.getDate() - 3);
    content += `*${note.dateHelper.getDayName()}, ${note.dateHelper.getMonthName()} ${friday.getDate()}, ${friday.getFullYear()}*\n\n`;
  } else {
    content += '## Yesterday\n\n';
    content += `*${note.dateHelper.getDayName()}, ${note.dateHelper.getMonthName()} ${yesterday.getDate()}, ${yesterday.getFullYear()}*\n\n`;
  }

  content += '**Completed:**\n';
  content += createTaskList([
    'Task completed yesterday',
    'Another completed task'
  ], false);
  content += '\n';

  content += '**Progress Made:**\n';
  content += createTaskList([
    'Progress on ongoing task'
  ], false);
  content += '\n';

  // Today section
  content += '## Today\n\n';
  content += `*${dateString}*\n\n`;

  content += '**Planned Tasks:**\n';
  content += createTaskList([
    'Primary task for today',
    'Secondary task',
    'Quick win task'
  ], true);
  content += '\n';

  content += '**Focus:**\n';
  content += '> \n\n';

  content += '**Time Allocation:**\n';
  content += '```\n';
  content += '09:00 - 10:30  Deep Work: \n';
  content += '10:30 - 11:00  \n';
  content += '11:00 - 12:00  \n';
  content += '12:00 - 13:00  Lunch\n';
  content += '13:00 - 15:00  \n';
  content += '15:00 - 16:00  \n';
  content += '16:00 - 17:00  \n';
  content += '```\n\n';

  // Tomorrow section
  content += '## Tomorrow\n\n';
  const tomorrowDate = note.dateHelper.toDate();
  tomorrowDate.setDate(tomorrowDate.getDate() + 1);
  content += `*${note.dateHelper.getDayName()}, ${note.dateHelper.getMonthName()} ${tomorrowDate.getDate()}, ${tomorrowDate.getFullYear()}*\n\n`;

  content += '**Planned:**\n';
  content += createTaskList([
    'Preview of tomorrow\'s work'
  ], false);
  content += '\n';

  // Blockers section
  content += '## Blockers\n\n';
  content += createBlockerSection();
  content += '\n';

  // Notes section
  content += '## Notes\n\n';
  content += `[${timeString}] \n\n`;
  content += '\n\n';

  // Team updates section
  content += '## Team Updates\n\n';
  content += '**Mentions:**\n';
  content += '- @teammate: \n\n';

  content += '**Helping:**\n';
  content += '- \n\n';

  content += '**Need Help With:**\n';
  content += '- \n\n';

  // Progress tracking
  content += '## Progress Tracking\n\n';
  content += '**Current Sprint:**\n';
  content += createProgressBar('Sprint Progress', 0, 10, 7) + '\n';
  content += '\n';

  content += '**Personal Velocity:**\n';
  content += '- Story Points Today: ___\n';
  content += '- Week Total: ___\n';
  content += '- Sprint Total: ___\n\n';

  // Links & references
  content += '## Links & References\n\n';
  content += '**Related Tasks:**\n';
  content += '- \n\n';

  content += '**PRs/Issues:**\n';
  content += '- \n\n';

  content += '**Documentation:**\n';
  content += '- \n\n';

  // Quick stats
  content += '## Quick Stats\n\n';
  const stats = {
    'Tasks Completed': '___',
    'Code Reviews': '___',
    'Meetings': '___',
    'Focus Time': '___ hours'
  };

  content += '| Metric | Count |\n';
  content += '|--------|-------|\n';
  for (const [metric, value] of Object.entries(stats)) {
    content += `| ${metric} | ${value} |\n`;
  }
  content += '\n';

  // Mood & energy
  content += '## Mood & Energy\n\n';
  content += '**Energy Level:** ⚡⚡⚡⚡⚡ (1-5)\n\n';
  content += '**Mood:** 😊 Great | 😐 Okay | 😟 Struggling\n\n';
  content += '**Notes:**\n';
  content += '\n\n';

  // Footer
  content += '---\n\n';
  content += createFooter(user, dateString);

  return content;
};

// Helper: Create task list
function createTaskList(tasks, withCheckbox) {
  if (!tasks || tasks.length === 0) {
    return '- \n';
  }

  return tasks.map(task => {
    if (withCheckbox) {
      return `- [ ] ${task}`;
    }
    return `- ${task}`;
  }).join('\n');
}

// Helper: Create blocker section
function createBlockerSection() {
  return `**Current Blockers:**\n` +
         `- ⛔ None\n\n` +
         `**Potential Blockers:**\n` +
         `- \n\n` +
         `**Resolution Needed:**\n` +
         `- `;
}

// Helper: Create progress bar
function createProgressBar(label, current, total, width = 10) {
  const percentage = total > 0 ? Math.round((current / total) * 100) : 0;
  const filled = Math.round((current / total) * width);
  const empty = width - filled;

  const bar = '█'.repeat(filled) + '░'.repeat(empty);
  return `**${label}:** [${bar}] ${current}/${total} (${percentage}%)`;
}

// Helper: Create footer
function createFooter(user, date) {
  return `*Standup submitted by ${user} on ${date}*\n\n` +
         `#standup #daily`;
}
